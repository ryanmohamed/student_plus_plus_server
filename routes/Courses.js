const express = require('express');
const router = express.Router();
const { Courses, Categories, Assignments } = require('../models');

const jwt = require('jsonwebtoken');
require('dotenv').config();

/* COURSE OBJECT METHODS */

//getCourses()
router.get('/', authenticateToken, async (req, res) => {
    
    /* after we've authenticated requesting client */
    const email = req.user.email; //get username from middleware
    const courses = await Courses.findAll({ where: {UserEmail: email} }); //must wait before we execute
    if(courses.length === 0) return res.json({error: "no courses exist"});
    return res.json(courses);
    
});

//createCourse
router.post('/create', authenticateToken, async (req, res) => {
    
    /* after we've authenticated requesting client */
 
    // submitted as json : { name } 
    let body = req.body;
    const email = req.user.email;
    console.log(email);
    
    //check if there's the same course for the same user
    const temp = await Courses.findOne({ where: {
        name: body.name, 
        UserEmail: email //provided by middleware
    } });

    if(temp) return res.json({error: "course already exists"});

    //CREATE COURSE

    //create valid course json
    const course = {
        name: body.name,
        /* id: generated by sequelize */
        UserEmail: email
    };
    const courseObj = await Courses.create(course); //ideally we should catch this 

    //after we've created it make the categories
    let count = 0.0;
    
    for(let key in req.body){
        let value = req.body[key];
        console.log(key, value);

        if(key !== 'name'){ //we want to add the category
            
            await Categories.findOrCreate({
                where: {
                    name: key,
                    weight: value,
                    CourseId: courseObj.id
                }
            }).then( async ([category, created]) => {
                if(!created) return res.json({error: 'category already exists'});
                count += parseInt(category.weight);
            });
        }
    }

    courseObj.perfectTotal = count;
    await courseObj.save();
    res.json(course);

});

//getCourseName()
router.get('/:courseID', authenticateToken, async (req, res) => {
    
    /* after we've authenticated requesting client */
    const courseID = req.params.courseID; //get username from middleware
    const course = await Courses.findOne({ where: {id: courseID} }); //must wait before we execute
    if(!course) return res.json({error: "course does not exist"});
    return res.json({name: course.name});
    
});


//getRunningTotal() &7 getCummulativeTotal()
router.get('/:courseName/getTotals', authenticateToken, async (req, res) => {
    
    const course = await Courses.findOne({
        where: {
            name: req.params.courseName,
            UserEmail: req.user.email
        }
    });
    if(!course) return res.json({error: "course does not exist"});

    const categories = await Categories.findAll({
        where: { courseId : course.id },
        raw: true
    });
    if(categories.length === 0) return res.json({error: "course has no categories"});

    const assignments = await Assignments.findAll({
        where: { courseId : course.id },
    });
    if(assignments.length === 0) return res.json({error: "course has no assignments"});

    let runningtotal = 0.0;
    let cummulative = 0.0;

    await Promise.all(assignments.map( async assignment => {
        // if(assignment.completion) total += assignment.perfectScore * categories[assignment.courseCategory];
        const category = await Categories.findOne({
            where: { name: assignment.courseCategory }
        });
        if(assignment.completion) {
            runningtotal += ((100*(assignment.scoreRecieved/assignment.perfectScore)) * (category.weight/course.perfectTotal));
            cummulative += 100*(assignment.scoreRecieved/assignment.perfectScore);
        }
    }));
    
    course.runningTotal = runningtotal;
    course.cummulativeTotal = cummulative;
    await course.save();
    res.json(course);
});

//getCategories(courseName)
router.get('/:courseName/categories', authenticateToken, async (req, res) => {
    const courseName = req.params.courseName; //get username from middleware
    const course = await Courses.findOne({ where: {name: courseName, UserEmail: req.user.email} }); //must wait before we execute
    if(!course) return res.json({error: "course does not exist"});

    const categories = await Categories.findAll({ where: {courseId: course.id}});
    if(categories.length === 0) return res.json({error: "no categories in this course"});
    
    const payload = categories.map(category => {
        return { name: category.name, weight: category.weight}
    });

    return res.json(payload);
});

//middleware, "lock" between client accessing any route
function authenticateToken(req, res, next){
    //access token in header
    const authHeader = req.headers['authorization']; //Bearer TOKEN
    const token = authHeader && authHeader.split(' ')[1]; //get token portion, either undefined or token portion using &&
    if(!token) return res.sendStatus(401); //null token

    //verify token using secret we hashed it with
    //callback should take in an error and the user we serialized
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
        if(err) return res.sendStatus(403); //token no longer valid - no access
        req.user = user;
        next(); //move on from middleware
    });
}

module.exports = router;